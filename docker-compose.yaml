services:
  frontend:
    container_name: SoraGo-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '${FRONTEND_PORT}:3000'
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    
  backend:
    container_name: SoraGo-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '${BACKEND_PORT}:5000'
    environment:
      - FRONTEND_URL=${FRONTEND_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: SoraGo-postgres
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - '${POSTGRES_PORT}:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    container_name: SoraGo-pgadmin
    image: dpage/pgadmin4
    ports:
      - '${PGADMIN_PORT}:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres

volumes:
  postgres_data:

networks:
  default:
    driver: bridge

